{"version":3,"sources":["components/Images.js","components/Loading.js","container/App.js","serviceWorker.js","index.js","components/inf.svg"],"names":["Images","array","className","Loading","src","load","alt","apiKey","count","initial","url","App","getPhotos","a","fetch","response","json","data","map","x","y","key","state","photosArray","length","href","links","html","target","urls","regular","alt_description","title","imagesArray","this","setState","concat","ready","loading","console","log","window","addEventListener","innerHeight","scrollY","document","body","offsetHeight","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message","module","exports"],"mappings":"yTAYeA,MAXf,YAAyB,IAARC,EAAO,EAAPA,MACb,OACA,yBAAKC,UAAU,gCACVD,I,gBCUME,MAXf,WACI,OACA,yBAAKD,UAAU,WACX,yBAAKE,IAAKC,IAAMC,IAAI,cCAtBC,EAAQ,8CACVC,EAAO,EACPC,GAAU,EACVC,EAAI,qDAAD,OAAsDH,EAAtD,kBAAsEC,GAqE9DG,E,kDAlEb,aAAc,IAAD,8BACX,gBAQFC,UATa,sBASF,uCAAAC,EAAA,+EAEeC,MAAMJ,GAFrB,cAEDK,EAFC,gBAGSA,EAASC,OAHlB,cAGHC,EAHG,gBAIiBA,EAAKC,KAAK,SAACC,EAAEC,GACnC,OACA,uBACIC,IAAKD,EAAE,EAAKE,MAAMC,YAAYC,OAC9BC,KAAMN,EAAEO,MAAMC,KACdC,OAAQ,UACJ,yBACKxB,IAAKe,EAAEU,KAAKC,QACbxB,IAAKa,EAAEY,gBACPC,MAAOb,EAAEY,sBAbhB,OAIHE,EAJG,OAiBNxB,IACDA,GAAU,EACVD,EAAQ,GACRE,EAAMA,EAAI,qDAAD,OAAsDH,EAAtD,kBAAsEC,IAG/E0B,KAAKC,SAAS,CAACZ,YAAcW,KAAKZ,MAAMC,YAAYa,OAAOH,GAAeI,OAAM,EAAOC,SAAQ,IAvBxF,kDA4BPC,QAAQC,IAAI,2CA5BL,0DAPT,EAAKlB,MAAM,CACTgB,SAAQ,EACRf,YAAY,GACZc,OAAM,GALG,E,gEAyCO,IAAD,OACjBH,KAAKtB,YAEL6B,OAAOC,iBAAiB,UAAS,WAE5BD,OAAOE,YAAcF,OAAOG,SAAWC,SAASC,KAAKC,aAAe,KAAQ,EAAKzB,MAAMe,OAExF,EAAKF,SAAS,CAACE,OAAM,GAAQ,EAAKzB,gB,+BAMxC,OAEE,yBAAKV,UAAU,OACb,wBAAIA,UAAU,KAAK,0BACjBgC,KAAKZ,MAAMgB,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQrC,MAAOiC,KAAKZ,MAAMC,mB,GA9DdyB,IAAMC,WCEJC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAActB,MACrBuB,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.babfad6d.chunk.js","sourcesContent":["import React from 'react';\nfunction Images({array}){\n    return(\n    <div className=\"image-container shadow-6 mh8\">\n        {array}\n    </div>\n    );\n}\n\n\n\n\nexport default Images;","import React from 'react';\nimport load from './inf.svg';\n\nfunction Loading(){\n    return(\n    <div className=\"loading\">\n        <img src={load} alt=\"loading\" />\n    </div>\n    );\n}\n\n\n\n\nexport default Loading;","import React from 'react';\nimport './App.css';\nimport 'tachyons';\nimport Images from '../components/Images';\nimport Loading from '../components/Loading';\n\nconst apiKey ='gZltUiUKrujp2xyoVwrqyrnolWRivEF1UvOnHqg4Dz8';\nlet count =5;\nlet initial = true; // for first load of images to be just 5 \nlet url=`https://api.unsplash.com/photos/random/?client_id=${apiKey}&count=${count}`;\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state={\n      loading:true,\n      photosArray:[],\n      ready:true,\n    }\n  }\n\n  getPhotos =async function(){\n    try{\n      const response= await fetch(url);\n      let data= await response.json();\n      let imagesArray=  await data.map( (x,y) => { //create <a> <img> </a> elements \n        return(\n        <a \n            key={y+this.state.photosArray.length} \n            href={x.links.html} \n            target={'_blank'} >\n                <img \n                     src={x.urls.regular} \n                    alt={x.alt_description} \n                    title={x.alt_description}  />\n         </a>)\n    });\n    //edit the count after the first load to be 20 images and update the url ..\n    if(initial){\n      initial = false  ;\n      count = 20;\n      url = url=`https://api.unsplash.com/photos/random/?client_id=${apiKey}&count=${count}`;\n    }\n      //concatinate the new fetched images to the previous imageArray\n      this.setState({photosArray : this.state.photosArray.concat(imagesArray) , ready:true , loading:false});\n      \n      \n    }\n      catch(error){\n      console.log(\"error..something wrong with fetching!..\");\n    }\n  }\n\n  componentDidMount(){\n    this.getPhotos();\n    // add scroll event to widow object .. and set it to request when reach the bottom of the page..\n    window.addEventListener('scroll',()=>{\n      // innerHeight = the whole height of the browser page // scrollY = where are we from the top of the page .. // body.offsetHeight = the whole height of the body including the part which is not appear // ready = to prevent sending multiple request at a time \n      if(window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000 && this.state.ready)\n      {\n        this.setState({ready:false}, this.getPhotos);\n      }\n    \n    });\n  }\n  render(){\n  return (\n\n    <div className=\"App\">\n      <h1 className=\" \">{'Infinite Scroll Images'}</h1>\n      { this.state.loading?\n      <Loading/> :\n      <Images array={this.state.photosArray}/>\n      }\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/inf.228a830f.svg\";"],"sourceRoot":""}