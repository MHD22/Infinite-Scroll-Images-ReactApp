{"ast":null,"code":"import _regeneratorRuntime from\"/Users/mhd.sad22/udemyProject/Infinite-Scroll-Images-ReactApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/mhd.sad22/udemyProject/Infinite-Scroll-Images-ReactApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/mhd.sad22/udemyProject/Infinite-Scroll-Images-ReactApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mhd.sad22/udemyProject/Infinite-Scroll-Images-ReactApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/mhd.sad22/udemyProject/Infinite-Scroll-Images-ReactApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/mhd.sad22/udemyProject/Infinite-Scroll-Images-ReactApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'./App.css';import'tachyons';import Images from'../components/Images';import Loading from'../components/Loading';var apiKey='gZltUiUKrujp2xyoVwrqyrnolWRivEF1UvOnHqg4Dz8';var count=5;var initial=true;// for first load of images to be just 5 \nvar url=\"https://api.unsplash.com/photos/random/?client_id=\".concat(apiKey,\"&count=\").concat(count);var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);_this=_super.call(this);_this.getPhotos=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this2=this;var response,data,imagesArray;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(url);case 3:response=_context.sent;_context.next=6;return response.json();case 6:data=_context.sent;_context.next=9;return data.map(function(x,y){//create <a> <img> </a> elements \nreturn/*#__PURE__*/React.createElement(\"a\",{key:y+_this2.state.photosArray.length,href:x.links.html,target:'_blank'},/*#__PURE__*/React.createElement(\"img\",{src:x.urls.regular,alt:x.alt_description,title:x.alt_description}));});case 9:imagesArray=_context.sent;//edit the count after the first load to be 20 images and update the url ..\nif(initial){initial=false;count=20;url=url=\"https://api.unsplash.com/photos/random/?client_id=\".concat(apiKey,\"&count=\").concat(count);}//concatinate the new fetched images to the previous imageArray\nthis.setState({photosArray:this.state.photosArray.concat(imagesArray),ready:true,loading:false});_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);console.log(\"error..something wrong with fetching!..\");case 17:case\"end\":return _context.stop();}}},_callee,this,[[0,14]]);}));_this.state={loading:true,photosArray:[],ready:true};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this3=this;this.getPhotos();// add scroll event to widow object .. and set it to request when reach the bottom of the page..\nwindow.addEventListener('scroll',function(){// innerHeight = the whole height of the browser page // scrollY = where are we from the top of the page .. // body.offsetHeight = the whole height of the body including the part which is not appear // ready = to prevent sending multiple request at a time \nif(window.innerHeight+window.scrollY>=document.body.offsetHeight-1000&&_this3.state.ready){_this3.setState({ready:false},_this3.getPhotos);}});}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"h1\",{className:\" \"},'Infinite Scroll Images'),this.state.loading?/*#__PURE__*/React.createElement(Loading,null):/*#__PURE__*/React.createElement(Images,{array:this.state.photosArray}));}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/Users/mhd.sad22/udemyProject/Infinite-Scroll-Images-ReactApp/src/container/App.js"],"names":["React","Images","Loading","apiKey","count","initial","url","App","getPhotos","fetch","response","json","data","map","x","y","state","photosArray","length","links","html","urls","regular","alt_description","imagesArray","setState","concat","ready","loading","console","log","window","addEventListener","innerHeight","scrollY","document","body","offsetHeight","Component"],"mappings":"qiCAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,WAAP,CACA,MAAO,UAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CAEA,GAAMC,CAAAA,MAAM,CAAE,6CAAd,CACA,GAAIC,CAAAA,KAAK,CAAE,CAAX,CACA,GAAIC,CAAAA,OAAO,CAAG,IAAd,CAAoB;AACpB,GAAIC,CAAAA,GAAG,6DAAsDH,MAAtD,mBAAsEC,KAAtE,CAAP,C,GACMG,CAAAA,G,sGAEJ,cAAa,qCACX,wBADW,MASbC,SATa,sEASF,uNAEeC,CAAAA,KAAK,CAACH,GAAD,CAFpB,QAEDI,QAFC,qCAGSA,CAAAA,QAAQ,CAACC,IAAT,EAHT,QAGHC,IAHG,qCAIiBA,CAAAA,IAAI,CAACC,GAAL,CAAU,SAACC,CAAD,CAAGC,CAAH,CAAS,CAAE;AAC3C,mBACA,yBACI,GAAG,CAAEA,CAAC,CAAC,MAAI,CAACC,KAAL,CAAWC,WAAX,CAAuBC,MADlC,CAEI,IAAI,CAAEJ,CAAC,CAACK,KAAF,CAAQC,IAFlB,CAGI,MAAM,CAAE,QAHZ,eAIQ,2BACK,GAAG,CAAEN,CAAC,CAACO,IAAF,CAAOC,OADjB,CAEI,GAAG,CAAER,CAAC,CAACS,eAFX,CAGI,KAAK,CAAET,CAAC,CAACS,eAHb,EAJR,CADA,CAUH,CAXyB,CAJjB,QAIHC,WAJG,eAgBT;AACA,GAAGnB,OAAH,CAAW,CACTA,OAAO,CAAG,KAAV,CACAD,KAAK,CAAG,EAAR,CACAE,GAAG,CAAGA,GAAG,6DAAsDH,MAAtD,mBAAsEC,KAAtE,CAAT,CACD,CACC;AACA,KAAKqB,QAAL,CAAc,CAACR,WAAW,CAAG,KAAKD,KAAL,CAAWC,WAAX,CAAuBS,MAAvB,CAA8BF,WAA9B,CAAf,CAA4DG,KAAK,CAAC,IAAlE,CAAyEC,OAAO,CAAC,KAAjF,CAAd,EAvBO,iFA4BPC,OAAO,CAACC,GAAR,CAAY,yCAAZ,EA5BO,qEATE,GAEX,MAAKd,KAAL,CAAW,CACTY,OAAO,CAAC,IADC,CAETX,WAAW,CAAC,EAFH,CAGTU,KAAK,CAAC,IAHG,CAAX,CAFW,aAOZ,C,6EAkCkB,iBACjB,KAAKnB,SAAL,GACA;AACAuB,MAAM,CAACC,gBAAP,CAAwB,QAAxB,CAAiC,UAAI,CACnC;AACA,GAAGD,MAAM,CAACE,WAAP,CAAqBF,MAAM,CAACG,OAA5B,EAAuCC,QAAQ,CAACC,IAAT,CAAcC,YAAd,CAA6B,IAApE,EAA4E,MAAI,CAACrB,KAAL,CAAWW,KAA1F,CACA,CACE,MAAI,CAACF,QAAL,CAAc,CAACE,KAAK,CAAC,KAAP,CAAd,CAA6B,MAAI,CAACnB,SAAlC,EACD,CAEF,CAPD,EAQD,C,uCACO,CACR,mBAEE,2BAAK,SAAS,CAAC,KAAf,eACE,0BAAI,SAAS,CAAC,GAAd,EAAmB,wBAAnB,CADF,CAEI,KAAKQ,KAAL,CAAWY,OAAX,cACF,oBAAC,OAAD,MADE,cAEF,oBAAC,MAAD,EAAQ,KAAK,CAAE,KAAKZ,KAAL,CAAWC,WAA1B,EAJF,CAFF,CAUD,C,iBAlEiBjB,KAAK,CAACsC,S,EAoExB,cAAe/B,CAAAA,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'tachyons';\nimport Images from '../components/Images';\nimport Loading from '../components/Loading';\n\nconst apiKey ='gZltUiUKrujp2xyoVwrqyrnolWRivEF1UvOnHqg4Dz8';\nlet count =5;\nlet initial = true; // for first load of images to be just 5 \nlet url=`https://api.unsplash.com/photos/random/?client_id=${apiKey}&count=${count}`;\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state={\n      loading:true,\n      photosArray:[],\n      ready:true,\n    }\n  }\n\n  getPhotos =async function(){\n    try{\n      const response= await fetch(url);\n      let data= await response.json();\n      let imagesArray=  await data.map( (x,y) => { //create <a> <img> </a> elements \n        return(\n        <a \n            key={y+this.state.photosArray.length} \n            href={x.links.html} \n            target={'_blank'} >\n                <img \n                     src={x.urls.regular} \n                    alt={x.alt_description} \n                    title={x.alt_description}  />\n         </a>)\n    });\n    //edit the count after the first load to be 20 images and update the url ..\n    if(initial){\n      initial = false  ;\n      count = 20;\n      url = url=`https://api.unsplash.com/photos/random/?client_id=${apiKey}&count=${count}`;\n    }\n      //concatinate the new fetched images to the previous imageArray\n      this.setState({photosArray : this.state.photosArray.concat(imagesArray) , ready:true , loading:false});\n      \n      \n    }\n      catch(error){\n      console.log(\"error..something wrong with fetching!..\");\n    }\n  }\n\n  componentDidMount(){\n    this.getPhotos();\n    // add scroll event to widow object .. and set it to request when reach the bottom of the page..\n    window.addEventListener('scroll',()=>{\n      // innerHeight = the whole height of the browser page // scrollY = where are we from the top of the page .. // body.offsetHeight = the whole height of the body including the part which is not appear // ready = to prevent sending multiple request at a time \n      if(window.innerHeight + window.scrollY >= document.body.offsetHeight - 1000 && this.state.ready)\n      {\n        this.setState({ready:false}, this.getPhotos);\n      }\n    \n    });\n  }\n  render(){\n  return (\n\n    <div className=\"App\">\n      <h1 className=\" \">{'Infinite Scroll Images'}</h1>\n      { this.state.loading?\n      <Loading/> :\n      <Images array={this.state.photosArray}/>\n      }\n    </div>\n  );\n}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}